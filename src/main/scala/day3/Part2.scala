package day3

import scala.io.Source
import scala.util.{Success, Try}

object Part2 extends App {

  type Coordinate = (Int, Int)
  type Counter    = Int

  sealed trait Direction

  case object UP extends Direction

  case object DOWN extends Direction

  case object LEFT extends Direction

  case object RIGHT extends Direction

  case class Command(direction: Direction, distance: Int)

  private def toTypeDirection(rawData: Char): Option[Direction] =
    rawData match {
      case 'R' => Some(RIGHT)
      case 'L' => Some(LEFT)
      case 'U' => Some(UP)
      case 'D' => Some(DOWN)
      case _   => None
    }

  def rawDataToCommand(rawData: String): Command = {
    Command(toTypeDirection(rawData.head).get, rawData.drop(1).toInt)
  }

  def createCounter(visited: List[(Coordinate, Counter)],
                    list: List[Coordinate]): List[(Coordinate, Counter)] = {
    val sizeOfPath                  = list.length
    val counterRange: List[Counter] = (visited.last._2 to visited.last._2 + sizeOfPath).toList
    list.zip(counterRange)
  }

  def pathToCoordinates(position: Coordinate,
                        visited: List[(Coordinate, Counter)],
                        command: Command): (List[(Coordinate, Counter)], Coordinate) = {
    command.direction match {
      case RIGHT =>
        val newXCoordinate = position._1 + command.distance
        (visited ++ createCounter(
           visited,
           (position._1 to newXCoordinate).map(x => (x, position._2)).toList),
         (newXCoordinate, position._2))
      case LEFT =>
        val newXCoordinate = position._1 - command.distance
        (visited ++ createCounter(
           visited,
           (newXCoordinate to position._1).reverse.map(x => (x, position._2)).toList),
         (newXCoordinate, position._2))
      case UP =>
        val newYCoordinate = position._2 + command.distance //1 - - 2
        (visited ++ createCounter(
           visited,
           (position._2 to newYCoordinate).map(y => (position._1, y)).toList),
         (position._1, newYCoordinate))
      case DOWN =>
        val newYCoordinate = position._2 - command.distance
        (visited ++ createCounter(
           visited,
           (newYCoordinate to position._2).reverse.map(y => (position._1, y)).toList),
         (position._1, newYCoordinate))
    }
  }

  lazy val path = Try(getClass.getClassLoader.getResource("day3Input.txt").getFile)

  def getInputList(path: Try[String]) = path match {
    case Success(foundPath) =>
      for {
        file <- Source.fromFile(foundPath).getLines()
      } yield file
  }

  def getCoordinatedVisited(listOfCommands: List[String]): List[(Coordinate, Counter)] =
    listOfCommands
      .foldLeft((List(((0, 0): Coordinate, 0: Counter)), (0: Int, 0: Int))) {
        (visitedAcc: (List[(Coordinate, Counter)], (Int, Int)), rawCommand: String) =>
          pathToCoordinates(visitedAcc._2, visitedAcc._1, rawDataToCommand(rawCommand))
      }
      ._1

  implicit object CounterOrdering extends Ordering[(Coordinate, Counter)] {
    def compare(a: (Coordinate, Counter), b: (Coordinate, Counter)) = a._2 compare b._2
  }

  def findMinimumDistance(wirePathOne: List[String], wirePathTwo: List[String]) = {
    val wireOne = getCoordinatedVisited(wirePathOne)
    val wireTwo = getCoordinatedVisited(wirePathTwo)
    val intersections = wireOne
      .map(_._1)
      .intersect(wireTwo.map(_._1))

    val counterWithIntersectionsWireOne: Map[Coordinate, Counter] = wireOne.filter { coordinate =>
      intersections.contains(coordinate._1)
    }.toMap
    val counterWithIntersectionsWireTwo: Map[Coordinate, Counter] = wireTwo.filter { coordinate =>
      intersections.contains(coordinate._1)
    }.toMap

    val combinedCounter = for {
      intersections <- counterWithIntersectionsWireOne.keys
    } yield {
      (intersections,
       counterWithIntersectionsWireOne(intersections) + counterWithIntersectionsWireTwo(
         intersections))
    }

    combinedCounter.toList.sorted.filterNot(_ == ((0, 0), 0)).min
  }

  val wireOne = List(
    "R1009",
    "U263",
    "L517",
    "U449",
    "L805",
    "D78",
    "L798",
    "D883",
    "L777",
    "D562",
    "R652",
    "D348",
    "R999",
    "D767",
    "L959",
    "U493",
    "R59",
    "D994",
    "L225",
    "D226",
    "R634",
    "D200",
    "R953",
    "U343",
    "L388",
    "U158",
    "R943",
    "U544",
    "L809",
    "D785",
    "R618",
    "U499",
    "L476",
    "U600",
    "L452",
    "D693",
    "L696",
    "U764",
    "L927",
    "D346",
    "L863",
    "D458",
    "L789",
    "U268",
    "R586",
    "U884",
    "L658",
    "D371",
    "L910",
    "U178",
    "R524",
    "U169",
    "R973",
    "D326",
    "R483",
    "U233",
    "R26",
    "U807",
    "L246",
    "D711",
    "L641",
    "D75",
    "R756",
    "U365",
    "R203",
    "D377",
    "R624",
    "U430",
    "L422",
    "U367",
    "R547",
    "U294",
    "L916",
    "D757",
    "R509",
    "D332",
    "R106",
    "D401",
    "L181",
    "U5",
    "L443",
    "U197",
    "R406",
    "D829",
    "R878",
    "U35",
    "L958",
    "U31",
    "L28",
    "D362",
    "R188",
    "D582",
    "R358",
    "U750",
    "R939",
    "D491",
    "R929",
    "D513",
    "L541",
    "U418",
    "R861",
    "D639",
    "L917",
    "U582",
    "R211",
    "U725",
    "R711",
    "D718",
    "L673",
    "U921",
    "L157",
    "U83",
    "L199",
    "U501",
    "L66",
    "D993",
    "L599",
    "D947",
    "L26",
    "U237",
    "L981",
    "U833",
    "L121",
    "U25",
    "R641",
    "D372",
    "L757",
    "D645",
    "R287",
    "U390",
    "R274",
    "U964",
    "R288",
    "D209",
    "R109",
    "D364",
    "R983",
    "U715",
    "L315",
    "U758",
    "R36",
    "D500",
    "R626",
    "U893",
    "L840",
    "U716",
    "L606",
    "U831",
    "L969",
    "D643",
    "L300",
    "D838",
    "R31",
    "D751",
    "L632",
    "D702",
    "R468",
    "D7",
    "L169",
    "U149",
    "R893",
    "D33",
    "R816",
    "D558",
    "R152",
    "U489",
    "L237",
    "U415",
    "R434",
    "D472",
    "L198",
    "D874",
    "L351",
    "U148",
    "R761",
    "U809",
    "R21",
    "D25",
    "R586",
    "D338",
    "L568",
    "U20",
    "L157",
    "U221",
    "L26",
    "U424",
    "R261",
    "D227",
    "L551",
    "D754",
    "L90",
    "U110",
    "L791",
    "U433",
    "R840",
    "U323",
    "R240",
    "U124",
    "L723",
    "D418",
    "R938",
    "D173",
    "L160",
    "U293",
    "R773",
    "U204",
    "R192",
    "U958",
    "L472",
    "D703",
    "R556",
    "D168",
    "L263",
    "U574",
    "L845",
    "D932",
    "R165",
    "D348",
    "R811",
    "D834",
    "R960",
    "U877",
    "R935",
    "D141",
    "R696",
    "U748",
    "L316",
    "U236",
    "L796",
    "D566",
    "R524",
    "U449",
    "R378",
    "U480",
    "L79",
    "U227",
    "R867",
    "D185",
    "R474",
    "D757",
    "R366",
    "U153",
    "R882",
    "U252",
    "R861",
    "U900",
    "R28",
    "U381",
    "L845",
    "U642",
    "L849",
    "U352",
    "R134",
    "D294",
    "R788",
    "D406",
    "L693",
    "D697",
    "L433",
    "D872",
    "R78",
    "D364",
    "R240",
    "U995",
    "R48",
    "D681",
    "R727",
    "D825",
    "L583",
    "U44",
    "R743",
    "D929",
    "L616",
    "D262",
    "R997",
    "D15",
    "R575",
    "U341",
    "R595",
    "U889",
    "R254",
    "U76",
    "R962",
    "D944",
    "R724",
    "D261",
    "R608",
    "U753",
    "L389",
    "D324",
    "L569",
    "U308",
    "L488",
    "D358",
    "L695",
    "D863",
    "L712",
    "D978",
    "R149",
    "D177",
    "R92"
  )
  val wireTwo = List(
    "L1003",
    "D960",
    "L10",
    "D57",
    "R294",
    "U538",
    "R867",
    "D426",
    "L524",
    "D441",
    "R775",
    "U308",
    "R577",
    "D785",
    "R495",
    "U847",
    "R643",
    "D895",
    "R448",
    "U685",
    "L253",
    "U312",
    "L312",
    "U753",
    "L89",
    "U276",
    "R799",
    "D923",
    "L33",
    "U595",
    "R400",
    "U111",
    "L664",
    "D542",
    "R171",
    "U709",
    "L809",
    "D713",
    "L483",
    "U918",
    "L14",
    "U854",
    "L150",
    "D69",
    "L158",
    "D500",
    "L91",
    "D800",
    "R431",
    "D851",
    "L798",
    "U515",
    "L107",
    "U413",
    "L94",
    "U390",
    "L17",
    "U221",
    "L999",
    "D546",
    "L191",
    "U472",
    "L568",
    "U114",
    "L913",
    "D743",
    "L713",
    "D215",
    "L569",
    "D674",
    "L869",
    "U549",
    "L789",
    "U259",
    "L330",
    "D76",
    "R243",
    "D592",
    "L646",
    "U880",
    "L363",
    "U542",
    "L464",
    "D955",
    "L107",
    "U473",
    "R818",
    "D786",
    "R852",
    "U968",
    "R526",
    "D78",
    "L275",
    "U891",
    "R480",
    "U991",
    "L981",
    "D391",
    "R83",
    "U691",
    "R689",
    "D230",
    "L217",
    "D458",
    "R10",
    "U736",
    "L317",
    "D145",
    "R902",
    "D428",
    "R344",
    "U334",
    "R131",
    "D739",
    "R438",
    "D376",
    "L652",
    "U304",
    "L332",
    "D452",
    "R241",
    "D783",
    "R82",
    "D317",
    "R796",
    "U323",
    "R287",
    "D487",
    "L302",
    "D110",
    "R233",
    "U631",
    "R584",
    "U973",
    "L878",
    "D834",
    "L930",
    "U472",
    "R120",
    "U78",
    "R806",
    "D21",
    "L521",
    "U988",
    "R251",
    "D817",
    "R44",
    "D789",
    "R204",
    "D669",
    "R616",
    "D96",
    "R624",
    "D891",
    "L532",
    "U154",
    "R438",
    "U469",
    "R785",
    "D431",
    "R945",
    "U649",
    "R670",
    "D11",
    "R840",
    "D521",
    "L235",
    "D69",
    "L551",
    "D266",
    "L454",
    "U807",
    "L885",
    "U590",
    "L647",
    "U763",
    "R449",
    "U194",
    "R68",
    "U809",
    "L884",
    "U962",
    "L476",
    "D648",
    "L139",
    "U96",
    "L300",
    "U351",
    "L456",
    "D202",
    "R168",
    "D698",
    "R161",
    "U834",
    "L273",
    "U47",
    "L8",
    "D157",
    "L893",
    "D200",
    "L454",
    "U723",
    "R886",
    "U92",
    "R474",
    "U262",
    "L190",
    "U110",
    "L407",
    "D723",
    "R786",
    "D786",
    "L572",
    "D915",
    "L904",
    "U744",
    "L820",
    "D663",
    "R205",
    "U878",
    "R186",
    "U247",
    "L616",
    "D386",
    "R582",
    "U688",
    "L349",
    "D399",
    "R702",
    "U132",
    "L276",
    "U866",
    "R851",
    "D633",
    "R468",
    "D263",
    "R678",
    "D96",
    "L50",
    "U946",
    "R349",
    "D482",
    "R487",
    "U525",
    "R464",
    "U977",
    "L499",
    "D187",
    "R546",
    "U708",
    "L627",
    "D470",
    "R673",
    "D886",
    "L375",
    "U616",
    "L503",
    "U38",
    "L775",
    "D8",
    "L982",
    "D556",
    "R159",
    "U680",
    "L124",
    "U777",
    "L640",
    "D607",
    "R248",
    "D671",
    "L65",
    "D290",
    "R445",
    "U778",
    "L650",
    "U679",
    "L846",
    "D1",
    "L769",
    "U659",
    "R734",
    "D962",
    "R588",
    "U178",
    "R888",
    "D753",
    "R223",
    "U318",
    "L695",
    "D586",
    "R430",
    "D61",
    "R105",
    "U801",
    "R953",
    "U721",
    "L856",
    "U769",
    "R937",
    "D335",
    "R895"
  )

  println("Minimum combined wire length Coordinate = " + findMinimumDistance(wireOne, wireTwo))
}
